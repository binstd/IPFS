"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const http = require("http");
const path = require("path");
const getPort = require("get-port");
const createDebug = require("debug");
const command_exists_1 = require("command-exists");
const glob = require("glob");
const eol = require("eol");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const debug = createDebug('devcert');
// Install the once-per-machine trusted root CA. We'll use this CA to sign per-app certs, allowing
// us to minimize the need for elevated permissions while still allowing for per-app certificates.
function installCertificateAuthority(installCertutil) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        debug(`generating openssl configuration`);
        generateOpenSSLConfFiles();
        debug(`generating root certificate authority key`);
        utils_1.generateKey(constants_1.rootKeyPath);
        debug(`generating root certificate authority certificate`);
        utils_1.openssl(`req -config ${constants_1.opensslConfPath} -key ${constants_1.rootKeyPath} -out ${constants_1.rootCertPath} -new -subj "/CN=devcert" -x509 -days 7000 -extensions v3_ca`);
        debug(`adding root certificate authority to trust stores`);
        if (constants_1.isMac) {
            yield addToMacTrustStores(installCertutil);
        }
        else if (constants_1.isLinux) {
            yield addToLinuxTrustStores(installCertutil);
        }
        else {
            yield addToWindowsTrustStores();
        }
    });
}
exports.default = installCertificateAuthority;
// Copy our openssl conf template to the local config folder, and update the paths to be OS
// specific. Also initializes the files openssl needs to sign certificates as a certificate
// authority
function generateOpenSSLConfFiles() {
    let confTemplate = fs_1.readFileSync(constants_1.opensslConfTemplate, 'utf-8');
    confTemplate = confTemplate.replace(/DATABASE_PATH/, constants_1.configPath('index.txt').replace(/\\/g, '\\\\'));
    confTemplate = confTemplate.replace(/SERIAL_PATH/, constants_1.configPath('serial').replace(/\\/g, '\\\\'));
    confTemplate = eol.auto(confTemplate);
    fs_1.writeFileSync(constants_1.opensslConfPath, confTemplate);
    fs_1.writeFileSync(constants_1.configPath('index.txt'), '');
    fs_1.writeFileSync(constants_1.configPath('serial'), '01');
    // This version number lets us write code in the future that intelligently upgrades an existing
    // devcert installation. This "ca-version" is independent of the devcert package version, and
    // tracks changes to the root certificate setup only.
    fs_1.writeFileSync(constants_1.configPath('devcert-ca-version'), '1');
}
// macOS is pretty simple - just add the certificate to the system keychain, and most applications
// will delegate to that for determining trusted certificates. Firefox, of course, does it's own
// thing. We can try to automatically install the cert with Firefox if we can use certutil via the
// `nss` Homebrew package, otherwise we go manual with user-facing prompts.
function addToMacTrustStores(installCertutil) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Chrome, Safari, system utils
        debug('adding devcert root CA to macOS system keychain');
        utils_1.run(`sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain -p ssl -p basic "${constants_1.rootCertPath}"`);
        // Firefox
        try {
            // Try to use certutil to install the cert automatically
            debug('adding devcert root CA to firefox');
            yield addCertificateToNSSCertDB(path.join(process.env.HOME, 'Library/Application Support/Firefox/Profiles/*'), {
                installCertutil,
                checkForOpenFirefox: true
            });
        }
        catch (e) {
            // Otherwise, open the cert in Firefox to install it
            yield openCertificateInFirefox('/Applications/Firefox.app/Contents/MacOS/firefox');
        }
    });
}
// Linux is surprisingly difficult. There seems to be multiple system-wide repositories for certs,
// so we copy ours to each. However, Firefox does it's usual separate trust store. Plus Chrome
// relies on the NSS tooling (like Firefox), but uses the user's NSS database, unlike Firefox which
// uses a separate Mozilla one. And since Chrome doesn't prompt the user with a GUI flow when
// opening certs, if we can't use certutil, we're out of luck.
function addToLinuxTrustStores(installCertutil) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // system utils
        debug('adding devcert root CA to linux system-wide certificates');
        utils_1.run(`sudo cp ${constants_1.rootCertPath} /etc/ssl/certs/devcert.pem`);
        utils_1.run(`sudo cp ${constants_1.rootCertPath} /usr/local/share/ca-certificates/devcert.cer`);
        utils_1.run(`sudo update-ca-certificates`);
        // Firefox
        try {
            // Try to use certutil to install the cert automatically
            debug('adding devcert root CA to firefox');
            yield addCertificateToNSSCertDB(path.join(process.env.HOME, '.mozilla/firefox/*'), {
                installCertutil,
                checkForOpenFirefox: true
            });
        }
        catch (e) {
            // Otherwise, open the cert in Firefox to install it
            yield openCertificateInFirefox('firefox');
        }
        // Chrome
        try {
            debug('adding devcert root CA to chrome');
            yield addCertificateToNSSCertDB(path.join(process.env.HOME, '.pki/nssdb'), { installCertutil });
        }
        catch (e) {
            console.warn(`
WARNING: Because you did not pass in \`installCertutil: true\` to devcert, we
are unable to update Chrome to automatically trust generated development
certificates. The certificates will work, but Chrome will continue to warn you
that they are untrusted.`);
        }
    });
}
// Windows is at least simple. Like macOS, most applications will delegate to the system trust
// store, which is updated with the confusingly named `certutil` exe (not the same as the
// NSS/Mozilla certutil). Firefox does it's own thing as usual, and getting a copy of NSS certutil
// onto the Windows machine to try updating the Firefox store is basically a nightmare, so we don't
// even try it - we just bail out to the GUI.
function addToWindowsTrustStores() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // IE, Chrome, system utils
        debug('adding devcert root to Windows OS trust store');
        utils_1.run(`certutil -addstore -user root ${constants_1.rootCertPath}`);
        // Firefox (don't even try NSS certutil, no easy install for Windows)
        yield openCertificateInFirefox('start firefox');
    });
}
// Given a directory or glob pattern of directories, attempt to install the certificate to each
// directory containing an NSS database.
function addCertificateToNSSCertDB(nssDirGlob, options = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let certutilPath = lookupOrInstallCertutil(options.installCertutil);
        if (!certutilPath) {
            throw new Error('certutil not available, and `installCertutil` was false');
        }
        // Firefox appears to load the NSS database in-memory on startup, and overwrite on exit. So we
        // have to ask the user to quite Firefox first so our changes don't get overwritten.
        if (options.checkForOpenFirefox) {
            let runningProcesses = utils_1.run('ps aux');
            if (runningProcesses.indexOf('firefox') > -1) {
                console.log('Please close Firefox before continuing (Press <Enter> when ready)');
                yield utils_1.waitForUser();
            }
        }
        debug(`trying to install certificate into NSS databases in ${nssDirGlob}`);
        glob.sync(nssDirGlob).forEach((potentialNSSDBDir) => {
            debug(`checking to see if ${potentialNSSDBDir} is a valid NSS database directory`);
            if (fs_1.existsSync(path.join(potentialNSSDBDir, 'cert8.db'))) {
                debug(`Found legacy NSS database in ${potentialNSSDBDir}, adding devcert ...`);
                utils_1.run(`${certutilPath} -A -d "${potentialNSSDBDir}" -t 'C,,' -i ${constants_1.rootCertPath} -n devcert`);
            }
            else if (fs_1.existsSync(path.join(potentialNSSDBDir, 'cert9.db'))) {
                debug(`Found modern NSS database in ${potentialNSSDBDir}, adding devcert ...`);
                utils_1.run(`${certutilPath} -A -d "sql:${potentialNSSDBDir}" -t 'C,,' -i ${constants_1.rootCertPath} -n devcert`);
            }
        });
    });
}
// When a Firefox tab is directed to a URL that returns a certificate, it will automatically prompt
// the user if they want to add it to their trusted certificates. This is handy since Firefox is by
// far the most troublesome to handle. If we can't automatically install the certificate (because
// certutil is not available / installable), we instead start a quick web server and host our
// certificate file. Then we open the hosted cert URL in Firefox to kick off the GUI flow.
function openCertificateInFirefox(firefoxPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        debug('adding devert to firefox manually - launch webserver for certificate hosting');
        let port = yield getPort();
        let server = http.createServer((req, res) => {
            res.writeHead(200, { 'Content-type': 'application/x-x509-ca-cert' });
            res.write(fs_1.readFileSync(constants_1.rootCertPath));
            res.end();
        }).listen(port);
        debug('certificate is hosted, starting firefox at hosted URL');
        console.log(`Unable to automatically install SSL certificate - please follow the prompts at http://localhost:${port} in Firefox to trust the root certificate`);
        console.log('See https://github.com/davewasmer/devcert#how-it-works for more details');
        console.log('-- Press <Enter> once you finish the Firefox prompts --');
        child_process_1.exec(`${firefoxPath} http://localhost:${port}`);
        yield utils_1.waitForUser();
    });
}
// Try to install certutil if it's not already available, and return the path to the executable
function lookupOrInstallCertutil(installCertutil) {
    debug('looking for nss tooling ...');
    if (constants_1.isMac) {
        debug('on mac, looking for homebrew (the only method to install nss that is currently supported by devcert');
        if (command_exists_1.sync('brew')) {
            let nssPath;
            let certutilPath;
            try {
                certutilPath = path.join(utils_1.run('brew --prefix nss').toString().trim(), 'bin', 'certutil');
            }
            catch (e) {
                debug('brew was found, but nss is not installed');
                if (installCertutil) {
                    debug('attempting to install nss via brew');
                    utils_1.run('brew install nss');
                    certutilPath = path.join(utils_1.run('brew --prefix nss').toString().trim(), 'bin', 'certutil');
                }
                else {
                    return false;
                }
            }
            debug(`Found nss installed at ${certutilPath}`);
            return certutilPath;
        }
    }
    else if (constants_1.isLinux) {
        debug('on linux, checking is nss is already installed');
        if (!command_exists_1.sync('certutil')) {
            if (installCertutil) {
                debug('not already installed, installing it ourselves');
                utils_1.run('sudo apt install libnss3-tools');
            }
            else {
                debug('not installed and do not want to install');
                return false;
            }
        }
        debug('looks like nss is installed');
        return utils_1.run('which certutil').toString().trim();
    }
    // Windows? Ha!
    return false;
}
//# sourceMappingURL=data:application/json;base64,