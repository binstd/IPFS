"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require("fs");

var _require = require("path"),
    extname = _require.extname,
    resolve = _require.resolve;

var recursiveReaddir = require("recursive-readdir-synchronous");
var normalizePath = require("normalize-path");

var _require2 = require("./constants"),
    OPTION_DEFAULT_LINK_TEXT = _require2.OPTION_DEFAULT_LINK_TEXT,
    OPTION_DEFAULT_HTML = _require2.OPTION_DEFAULT_HTML,
    OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH = _require2.OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH;

exports.createPages = function (_ref) {
  var boundActionCreators = _ref.boundActionCreators;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$directory = _ref2.directory,
      directory = _ref2$directory === undefined ? OPTION_DEFAULT_LINK_TEXT : _ref2$directory,
      _ref2$externals = _ref2.externals,
      externals = _ref2$externals === undefined ? [] : _ref2$externals,
      _ref2$html = _ref2.html,
      html = _ref2$html === undefined ? OPTION_DEFAULT_HTML : _ref2$html,
      _ref2$redirectTemplat = _ref2.redirectTemplate,
      redirectTemplate = _ref2$redirectTemplat === undefined ? OPTION_DEFAULT_REDIRECT_TEMPLATE_PATH : _ref2$redirectTemplat;

  if (!directory.endsWith("/")) {
    directory += "/";
  }

  var createPage = boundActionCreators.createPage;


  if (!fs.existsSync(directory)) {
    throw Error("Invalid REPL directory specified: \"" + directory + "\"");
  }

  if (!fs.existsSync(redirectTemplate)) {
    throw Error("Invalid REPL redirectTemplate specified: \"" + redirectTemplate + "\"");
  }

  // TODO We could refactor this to use 'recursive-readdir' instead,
  // And wrap with Promise.all() to execute createPage() in parallel.
  // I'd need to find a way to reliably test error handling though.
  var files = recursiveReaddir(directory);

  if (files.length === 0) {
    console.warn("Specified REPL directory \"" + directory + "\" contains no files");

    return;
  }

  files.forEach(function (file) {
    if (extname(file) === ".js" || extname(file) === ".jsx") {
      var slug = file.substring(0, file.length - extname(file).length).replace(new RegExp("^" + directory), "redirect-to-codepen/");
      var code = fs.readFileSync(file, "utf8");

      // Codepen configuration.
      // https://blog.codepen.io/documentation/api/prefill/
      var action = "https://codepen.io/pen/define";
      var payload = (0, _stringify2.default)({
        editors: "0010",
        html: html,
        js: code,
        js_external: externals.join(";"),
        js_pre_processor: "babel",
        layout: "left"
      });

      createPage({
        path: slug,
        // Normalize the path so tests pass on Linux + Windows
        component: normalizePath(resolve(redirectTemplate)),
        context: {
          action: action,
          payload: payload
        }
      });
    }
  });
};