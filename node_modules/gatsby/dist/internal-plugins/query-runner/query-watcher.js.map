{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","store","boundActionCreators","queryCompiler","default","queue","normalize","report","exports","extractQueries","state","getState","pagesAndLayouts","pages","layouts","components","uniq","map","p","component","queryCompilerPromise","then","queryWillNotRun","queries","forEach","query","includes","replaceComponentQuery","text","componentPath","warn","log","stripIndent","process","env","NODE_ENV","watch","watcher","add","runQueriesForComponent","getPagesForComponent","deleteComponentsDependencies","path","id","push","page","_id","jsonName","Promise","on","resolve","filter","watchComponent","debounceCompile","debounce","noQueryComponents","Object","values","c","has","rootDir"],"mappings":"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","file":"query-watcher.js","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\n\nconst { store } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst queue = require(`./query-queue`)\nconst normalize = require(`normalize-path`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nexports.extractQueries = () => {\n  const state = store.getState()\n  const pagesAndLayouts = [...state.pages, ...state.layouts]\n  const components = _.uniq(pagesAndLayouts.map(p => normalize(p.component)))\n  const queryCompilerPromise = queryCompiler().then(queries => {\n    let queryWillNotRun = false\n\n    queries.forEach((query, component) => {\n      if (_.includes(components, component)) {\n        boundActionCreators.replaceComponentQuery({\n          query: query && query.text,\n          componentPath: component,\n        })\n      } else {\n        report.warn(\n          `The GraphQL query in the non-page component \"${component}\" will not be run.`\n        )\n        queryWillNotRun = true\n      }\n    })\n\n    if (queryWillNotRun) {\n      report.log(report.stripIndent`\n        Queries are only executed for Page or Layout components. Instead of a query,\n        co-locate a GraphQL fragment and compose that fragment into the query (or other\n        fragment) of the top-level page or layout that renders this component. For more\n        info on fragments and composition see: http://graphql.org/learn/queries/#fragments\n      `)\n    }\n\n    return\n  })\n\n  // During development start watching files to recompile & run\n  // queries on the fly.\n  if (process.env.NODE_ENV !== `production`) {\n    watch()\n\n    // Ensure every component is being watched.\n    components.forEach(component => {\n      watcher.add(component)\n    })\n  }\n\n  return queryCompilerPromise\n}\n\nconst runQueriesForComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page & layout data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page =>\n    queue.push({ ...page, _id: page.id, id: page.jsonName })\n  )\n\n  return new Promise(resolve => {\n    queue.on(`drain`, () => resolve())\n  })\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages, ...state.layouts].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nlet watcher\nexports.watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (watcher) {\n    watcher.add(componentPath)\n  }\n}\nconst watch = rootDir => {\n  if (watcher) return\n  const debounceCompile = _.debounce(() => {\n    queryCompiler().then(queries => {\n      const components = store.getState().components\n\n      // If a component previously with a query now doesn't â€” update the\n      // store.\n      const noQueryComponents = Object.values(components).filter(\n        c => c.query !== `` && !queries.has(c.componentPath)\n      )\n      noQueryComponents.forEach(({ componentPath }) => {\n        boundActionCreators.replaceComponentQuery({\n          query: ``,\n          componentPath,\n        })\n        runQueriesForComponent(componentPath)\n      })\n\n      // Update the store with the new queries and re-run queries that were\n      // changed.\n      queries.forEach(({ text }, id) => {\n        // Queries can be parsed from non page/layout components\n        // e.g. components with fragments so ignore those.\n        //\n        // If the query has changed, set the new query in the\n        // store and run its queries.\n        if (components[id] && text !== components[id].query) {\n          boundActionCreators.replaceComponentQuery({\n            query: text,\n            componentPath: id,\n          })\n          runQueriesForComponent(id)\n        }\n      })\n    })\n  }, 100)\n\n  watcher = chokidar\n    .watch(`${rootDir}/src/**/*.{js,jsx,ts,tsx}`)\n    .on(`change`, path => {\n      debounceCompile()\n    })\n}\n"]}