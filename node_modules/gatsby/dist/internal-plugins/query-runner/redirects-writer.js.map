{"version":3,"sources":["../../../src/internal-plugins/query-runner/redirects-writer.js"],"names":["writeRedirects","bootstrapFinished","store","getState","program","redirects","browserRedirects","filter","r","redirectInBrowser","fs","writeFile","directory","JSON","stringify","exports","oldRedirects","debouncedWriteRedirects","_","debounce","isEqual","Redirects","emitter","on"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,gCAAoB,IAApB;;AADqB,8BAGQC,aAAMC,QAAN,EAHR,EAGfC,OAHe,mBAGfA,OAHe,EAGNC,SAHM,mBAGNA,SAHM;;AAKrB;;AACMC,4BANe,GAMID,UAAUE,MAAV,CAAiB;AAAA,qBAAKC,EAAEC,iBAAP;AAAA,aAAjB,CANJ;AAAA;AAAA,mBAQfC,kBAAGC,SAAH,CACJ,oBAASP,QAAQQ,SAAjB,EAA6B,uBAA7B,CADI,EAEJC,KAAKC,SAAL,CAAeR,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFI,CARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAcAS,QAAQf,cAAR,GAAyBA,cAAzB;;AAEA,IAAIC,oBAAoB,KAAxB;AACA,IAAIe,qBAAJ;AACA,IAAMC,0BAA0BC,iBAAEC,QAAF,CAAW,YAAM;AAC/C;AACA,MACElB,qBACA,CAACiB,iBAAEE,OAAF,CAAUJ,YAAV,EAAwBd,aAAMC,QAAN,GAAiBE,SAAzC,CAFH,EAGE;AACAL;AACAgB,mBAAed,aAAMC,QAAN,GAAiBkB,SAAhC;AACD;AACF,CAT+B,EAS7B,GAT6B,CAAhC;;AAWAC,eAAQC,EAAR,CAAY,iBAAZ,EAA8B,YAAM;AAClCN;AACD,CAFD","file":"redirects-writer.js","sourcesContent":["import _ from \"lodash\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../../redux/\"\nimport { joinPath } from \"../../utils/path\"\n\nconst writeRedirects = async () => {\n  bootstrapFinished = true\n\n  let { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects.filter(r => r.redirectInBrowser)\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nexports.writeRedirects = writeRedirects\n\nlet bootstrapFinished = false\nlet oldRedirects\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (\n    bootstrapFinished &&\n    !_.isEqual(oldRedirects, store.getState().redirects)\n  ) {\n    writeRedirects()\n    oldRedirects = store.getState().Redirects\n  }\n}, 250)\n\nemitter.on(`CREATE_REDIRECT`, () => {\n  debouncedWriteRedirects()\n})\n"]}