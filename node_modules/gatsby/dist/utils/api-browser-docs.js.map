{"version":3,"sources":["../../src/utils/api-browser-docs.js"],"names":["exports","onClientEntry","onInitialClientRender","onRouteUpdate","shouldUpdateScroll","registerServiceWorker","replaceRouterComponent","replaceComponentRenderer","replaceHistory","wrapRootComponent","replaceHydrateFunction"],"mappings":";;AAAA;;;;;;;;AAQAA,QAAQC,aAAR,GAAwB,IAAxB;;AAEA;;;;;;;AAOAD,QAAQE,qBAAR,GAAgC,IAAhC;;AAEA;;;;;;;;;;AAUAF,QAAQG,aAAR,GAAwB,IAAxB;;AAEA;;;;;;;AAOAH,QAAQI,kBAAR,GAA6B,IAA7B;;AAEA;;;;;AAKAJ,QAAQK,qBAAR,GAAgC,IAAhC;;AAEA;;;;;AAKAL,QAAQM,sBAAR,GAAiC,IAAjC;;AAEA;;;;;;;AAOAN,QAAQO,wBAAR,GAAmC,IAAnC;;AAEA;;;AAGAP,QAAQQ,cAAR,GAAyB,IAAzB;;AAEA;;;;;AAKAR,QAAQS,iBAAR,GAA4B,IAA5B;;AAEA;;;;;;;;;;;;AAYAT,QAAQU,sBAAR,GAAiC,IAAjC","file":"api-browser-docs.js","sourcesContent":["/**\n * Called when the Gatsby browser runtime first starts.\n * @example\n * exports.onClientEntry = () => {\n *   console.log(\"We've started!\")\n *   callAnalyticsAPI()\n * }\n */\nexports.onClientEntry = true\n\n/**\n * Called when the initial (but not subsequent) render of Gatsby App is done on the client.\n * @example\n * exports.onInitialClientRender = () => {\n *   console.log(\"ReactDOM.render has executed\")\n * }\n */\nexports.onInitialClientRender = true\n\n/**\n * Called when the user changes routes\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @example\n * exports.onRouteUpdate = ({ location }) => {\n *   console.log('new pathname', location.pathname)\n * }\n */\nexports.onRouteUpdate = true\n\n/**\n * Allow a plugin to decide if the \"scroll\" should update or\n * not on a route change.\n * @param {object} $0\n * @param {object} $0.prevRouterProps The previous state of the router before the route change.\n * @param {object} $0.pathname The new pathname\n */\nexports.shouldUpdateScroll = true\n\n/**\n * Allow a plugin to register a Service Worker. Should be a function that returns true.\n * @example\n * exports.registerServiceWorker = () => true\n */\nexports.registerServiceWorker = true\n\n/**\n * Allow a plugin to replace the router component e.g. to use a custom history version.\n * @param {object} $0\n * @param {object} $0.history The history instance to use in the replacement router instance\n */\nexports.replaceRouterComponent = true\n\n/**\n * Allow a plugin to replace the page and layout component renderer. This api runner can be used to\n * implement page transitions. See https://github.com/gatsbyjs/gatsby/tree/master/examples/using-page-transitions for an example of this.\n * @param {object} $0\n * @param {object} $0.props The props of the page or layout.\n * @param {object} $0.loader The gatsby loader.\n */\nexports.replaceComponentRenderer = true\n\n/**\n * Allow a plugin to replace the history object.\n */\nexports.replaceHistory = true\n\n/**\n * Allow a plugin to wrap the root component.\n * @param {object} $0\n * @param {object} $0.Root The \"Root\" component built by Gatsby.\n */\nexports.wrapRootComponent = true\n\n/**\n * Allow a plugin to replace the ReactDOM.render function call by a custom renderer.\n * This method takes no param and should return a function with same signature as ReactDOM.render()\n * Note it's very important to call the callback after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`\n * @example\n * exports.replaceHydrateFunction = () => {\n *   return (element, container, callback) => {\n *     console.log(\"rendering!\");\n *     ReactDOM.render(element, container, callback);\n *   };\n * };\n */\nexports.replaceHydrateFunction = true\n"]}