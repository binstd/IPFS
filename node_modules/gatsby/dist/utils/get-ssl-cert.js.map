{"version":3,"sources":["../../src/utils/get-ssl-cert.js"],"names":["getDevelopmentCertificate","require","default","report","fs","path","module","exports","name","certFile","keyFile","directory","panic","keyPath","join","certPath","key","readFileSync","cert","info","installCertutil"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,4BAA4BC,QAAS,aAAT,EAAuBC,OAAzD;AACA,IAAMC,SAASF,QAAS,yBAAT,CAAf;AACA,IAAMG,KAAKH,QAAS,IAAT,CAAX;AACA,IAAMI,OAAOJ,QAAS,MAAT,CAAb;;AAEAK,OAAOC,OAAP;AAAA,uFAAiB;AAAA,QAASC,IAAT,QAASA,IAAT;AAAA,QAAeC,QAAf,QAAeA,QAAf;AAAA,QAAyBC,OAAzB,QAAyBA,OAAzB;AAAA,QAAkCC,SAAlC,QAAkCA,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACA;AACA,gBAAIF,WAAW,CAACC,OAAZ,GAAsBA,OAA1B,EAAmC;AACjCP,qBAAOS,KAAP,CACG,2EADH;AAGD;;AAPc,kBASXH,YAAYC,OATD;AAAA;AAAA;AAAA;;AAUPG,mBAVO,GAUGR,KAAKS,IAAL,CAAUH,SAAV,EAAqBD,OAArB,CAVH;AAWPK,oBAXO,GAWIV,KAAKS,IAAL,CAAUH,SAAV,EAAqBF,QAArB,CAXJ;AAAA;AAAA,mBAaA;AACXI,qBADW;AAEXE,sBAFW;AAGXC,mBAAKZ,GAAGa,YAAH,CAAgBJ,OAAhB,CAHM;AAIXK,oBAAMd,GAAGa,YAAH,CAAgBF,QAAhB;AAJK,aAbA;;AAAA;AAAA;;AAAA;;AAqBfZ,mBAAOgB,IAAP,CAAa,2DAAb;AArBe;AAAA;AAAA,mBAuBAnB,0BAA0BQ,IAA1B,EAAgC;AAC3CY,+BAAiB;AAD0B,aAAhC,CAvBA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2BbjB,mBAAOS,KAAP,CAAc,0CAAd;;AA3Ba;AAAA,6CA8BR,KA9BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"get-ssl-cert.js","sourcesContent":["const getDevelopmentCertificate = require(`devcert-san`).default\nconst report = require(`gatsby-cli/lib/reporter`)\nconst fs = require(`fs`)\nconst path = require(`path`)\n\nmodule.exports = async ({ name, certFile, keyFile, directory }) => {\n  // check that cert file and key file are both true or both false, if they are both\n  // false, it defaults to the automatic ssl\n  if (certFile ? !keyFile : keyFile) {\n    report.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  if (certFile && keyFile) {\n    const keyPath = path.join(directory, keyFile)\n    const certPath = path.join(directory, certFile)\n\n    return await {\n      keyPath,\n      certPath,\n      key: fs.readFileSync(keyPath),\n      cert: fs.readFileSync(certPath),\n    }\n  }\n\n  report.info(`setting up automatic SSL certificate (may require sudo)\\n`)\n  try {\n    return await getDevelopmentCertificate(name, {\n      installCertutil: true,\n    })\n  } catch (err) {\n    report.panic(`\\nFailed to generate dev SSL certificate`, err)\n  }\n\n  return false\n}\n"]}