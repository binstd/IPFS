{"version":3,"sources":["../../../src/schema/types/type-date.js"],"names":["shouldInfer","getType","moment","require","GraphQLString","GraphQLBoolean","GraphQLScalarType","Kind","_","oneLine","ISO_8601_FORMAT","value","momentDate","utc","isValid","GraphQLDate","name","description","serialize","String","parseValue","parseLiteral","ast","kind","STRING","undefined","type","Object","freeze","args","formatString","fromNow","difference","locale","resolve","source","context","fieldName","date","JSON","parse","stringify","isPlainObject","format","diff"],"mappings":";;;QA4CgBA,W,GAAAA,W;QA+EAC,O,GAAAA,O;AA3HhB,IAAMC,SAASC,QAAS,QAAT,CAAf;;eAMIA,QAAS,SAAT,C;IAJFC,a,YAAAA,a;IACAC,c,YAAAA,c;IACAC,iB,YAAAA,iB;IACAC,I,YAAAA,I;;AAEF,IAAMC,IAAIL,QAAS,QAAT,CAAV;;gBACoBA,QAAS,aAAT,C;IAAZM,O,aAAAA,O;;AAER,IAAMC,kBAAkB,CACrB,MADqB,EAErB,SAFqB,EAGrB,YAHqB,EAIrB,UAJqB;;AAMtB;AACC,eAPqB,EAQrB,kBARqB,EASrB,iBATqB,EAUrB,qBAVqB,EAWrB,mBAXqB,EAYrB,yBAZqB,EAarB,uBAbqB;;AAetB;AACC,gBAhBqB,EAiBrB,mBAjBqB,EAkBrB,kBAlBqB,EAmBrB,sBAnBqB,EAoBrB,oBApBqB,EAqBrB,0BArBqB,EAsBrB,wBAtBqB,EAwBrB,YAxBqB,EAyBrB,WAzBqB,EA0BrB,cA1BqB,EA2BrB,YA3BqB,EA4BrB,WA5BqB,EA6BrB,UA7BqB,CAAxB;;AAgCA;AACA;AACO,SAASV,WAAT,CAAqBW,KAArB,EAA4B;AACjC,MAAMC,aAAaV,OAAOW,GAAP,CAAWF,KAAX,EAAkBD,eAAlB,EAAmC,IAAnC,CAAnB;AACA,SAAOE,WAAWE,OAAX,MAAwB,OAAOH,KAAP,KAAkB,QAAjD;AACD;;AAEM,IAAMI,oCAAc,IAAIT,iBAAJ,CAAsB;AAC/CU,QAAO,MADwC;AAE/CC,eAAaR,OAAQ;;wEAF0B;AAK/CS,aAAWC,MALoC;AAM/CC,cAAYD,MANmC;AAO/CE,eAAaC,GAAb,EAAkB;AAChB,WAAOA,IAAIC,IAAJ,KAAahB,KAAKiB,MAAlB,GAA2BF,IAAIX,KAA/B,GAAuCc,SAA9C;AACD;AAT8C,CAAtB,CAApB;;AAYP,IAAMC,OAAOC,OAAOC,MAAP,CAAc;AACzBF,QAAMX,WADmB;AAEzBc,QAAM;AACJC,kBAAc;AACZJ,YAAMtB,aADM;AAEZa,mBAAaR,OAAQ;;;;;AAFT,KADV;AASJsB,aAAS;AACPL,YAAMrB,cADC;AAEPY,mBAAaR,OAAQ;;AAFd,KATL;AAcJuB,gBAAY;AACVN,YAAMtB,aADI;AAEVa,mBAAaR,OAAQ;;;;;AAFX,KAdR;AAsBJwB,YAAQ;AACNP,YAAMtB,aADA;AAENa,mBAAaR,OAAQ;;AAFf;AAtBJ,GAFmB;AA8BzByB,UAAQC,MAAR,EAAgBN,IAAhB,EAAsBO,OAAtB,QAA8C;AAAA,QAAbC,SAAa,QAAbA,SAAa;;AAC5C,QAAIC,aAAJ;AACA,QAAIH,OAAOE,SAAP,CAAJ,EAAuB;AACrBC,aAAOC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeN,OAAOE,SAAP,CAAf,CAAX,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;;AAED,QAAI7B,EAAEkC,aAAF,CAAgBb,IAAhB,CAAJ,EAA2B;AAAA,UACjBE,OADiB,GACoCF,IADpC,CACjBE,OADiB;AAAA,UACRC,UADQ,GACoCH,IADpC,CACRG,UADQ;AAAA,UACIF,YADJ,GACoCD,IADpC,CACIC,YADJ;AAAA,yBACoCD,IADpC,CACkBI,MADlB;AAAA,UACkBA,MADlB,gCAC4B,IAD5B;;AAEzB,UAAIH,YAAJ,EAAkB;AAChB,eAAO5B,OACJW,GADI,CACAyB,IADA,EACM5B,eADN,EACuB,IADvB,EAEJuB,MAFI,CAEGA,MAFH,EAGJU,MAHI,CAGGb,YAHH,CAAP;AAID,OALD,MAKO,IAAIC,OAAJ,EAAa;AAClB,eAAO7B,OACJW,GADI,CACAyB,IADA,EACM5B,eADN,EACuB,IADvB,EAEJuB,MAFI,CAEGA,MAFH,EAGJF,OAHI,EAAP;AAID,OALM,MAKA,IAAIC,UAAJ,EAAgB;AACrB,eAAO9B,SAAS0C,IAAT,CACL1C,OAAOW,GAAP,CAAWyB,IAAX,EAAiB5B,eAAjB,EAAkC,IAAlC,EAAwCuB,MAAxC,CAA+CA,MAA/C,CADK,EAELD,UAFK,CAAP;AAID;AACF;;AAED,WAAOM,IAAP;AACD;AA3DwB,CAAd,CAAb;;AA8DO,SAASrC,OAAT,GAAmB;AACxB,SAAOyB,IAAP;AACD","file":"type-date.js","sourcesContent":["const moment = require(`moment`)\nconst {\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLScalarType,\n  Kind,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst { oneLine } = require(`common-tags`)\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n\n  // Local Time\n  `YYYY-MM-DDTHH`,\n  `YYYY-MM-DDTHH:mm`,\n  `YYYY-MM-DDTHHmm`,\n  `YYYY-MM-DDTHH:mm:ss`,\n  `YYYY-MM-DDTHHmmss`,\n  `YYYY-MM-DDTHH:mm:ss.SSS`,\n  `YYYY-MM-DDTHHmmss.SSS`,\n\n  // Coordinated Universal Time (UTC)\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\n// Check if this is a date.\n// All the allowed ISO 8601 date-time formats used.\nexport function shouldInfer(value) {\n  const momentDate = moment.utc(value, ISO_8601_FORMAT, true)\n  return momentDate.isValid() && typeof value !== `number`\n}\n\nexport const GraphQLDate = new GraphQLScalarType({\n  name: `Date`,\n  description: oneLine`\n    A date string, such as 2007-12-03, compliant with the ISO 8601 standard \n    for representation of dates and times using the Gregorian calendar.`,\n  serialize: String,\n  parseValue: String,\n  parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined\n  },\n})\n\nconst type = Object.freeze({\n  type: GraphQLDate,\n  args: {\n    formatString: {\n      type: GraphQLString,\n      description: oneLine`\n        Format the date using Moment.js' date tokens e.g.\n        \"date(formatString: \"YYYY MMMM DD)\"\n        See https://momentjs.com/docs/#/displaying/format/\n        for documentation for different tokens`,\n    },\n    fromNow: {\n      type: GraphQLBoolean,\n      description: oneLine`\n        Returns a string generated with Moment.js' fromNow function`,\n    },\n    difference: {\n      type: GraphQLString,\n      description: oneLine`\n        Returns the difference between this date and the current time.\n        Defaults to miliseconds but you can also pass in as the\n        measurement years, months, weeks, days, hours, minutes,\n        and seconds.`,\n    },\n    locale: {\n      type: GraphQLString,\n      description: oneLine`\n        Configures the locale Moment.js will use to format the date.`,\n    },\n  },\n  resolve(source, args, context, { fieldName }) {\n    let date\n    if (source[fieldName]) {\n      date = JSON.parse(JSON.stringify(source[fieldName]))\n    } else {\n      return null\n    }\n\n    if (_.isPlainObject(args)) {\n      const { fromNow, difference, formatString, locale = `en` } = args\n      if (formatString) {\n        return moment\n          .utc(date, ISO_8601_FORMAT, true)\n          .locale(locale)\n          .format(formatString)\n      } else if (fromNow) {\n        return moment\n          .utc(date, ISO_8601_FORMAT, true)\n          .locale(locale)\n          .fromNow()\n      } else if (difference) {\n        return moment().diff(\n          moment.utc(date, ISO_8601_FORMAT, true).locale(locale),\n          difference\n        )\n      }\n    }\n\n    return date\n  },\n})\n\nexport function getType() {\n  return type\n}\n"]}