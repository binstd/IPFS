{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.js"],"names":["_","require","reporter","resolveModuleExports","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","difference","map","exportName","e","pluginName","name","pluginVersion","version","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","similarities","findBestMatch","bady","bestMatch","rating","target","handleBadExports","isBad","toPairs","badItem","entries","length","console","log","collatePluginAPIs","flattenedPlugins","allAPIs","node","browser","ssr","apiToPlugins","reduce","acc","value","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","pluginBrowserExports","pluginSSRExports","intersection","nodeAPI","push","browserAPI","ssrAPI","handleMultipleReplaceRenderers","replaceRenderer","rendererPlugins","includes","warn","join","error","process","env","NODE_ENV","exit","ignorable","messages","fp","i","skipSSR","m","module","exports"],"mappings":"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","file":"validate.js","sourcesContent":["const _ = require(`lodash`)\n\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst resolveModuleExports = require(`../resolve-module-exports`)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or\n    your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs`\n\n  badExports.forEach(bady => {\n    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)\n    message += `\\n â€” `\n    if (bady.pluginName == `default-site-plugin`) {\n      message += `Your site's gatsby-${exportType}.js is exporting a variable named \"${\n        bady.exportName\n      }\" which isn't an API.`\n    } else {\n      message += `The plugin \"${bady.pluginName}@${\n        bady.pluginVersion\n      }\" is exporting a variable named \"${bady.exportName}\" which isn't an API.`\n    }\n    if (similarities.bestMatch.rating > 0.5) {\n      message += ` Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nconst handleBadExports = ({ apis, badExports }) => {\n  // Output error messages for all bad exports\n  let isBad = false\n  _.toPairs(badExports).forEach(badItem => {\n    const [exportType, entries] = badItem\n    if (entries.length > 0) {\n      isBad = true\n      console.log(getBadExportsMessage(entries, exportType, apis[exportType]))\n    }\n  })\n  return isBad\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nconst collatePluginAPIs = ({ apis, flattenedPlugins }) => {\n  const allAPIs = [...apis.node, ...apis.browser, ...apis.ssr]\n  const apiToPlugins = allAPIs.reduce((acc, value) => {\n    acc[value] = []\n    return acc\n  }, {})\n\n  // Get a list of bad exports\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)\n      plugin.nodeAPIs.map(nodeAPI => apiToPlugins[nodeAPI].push(plugin.name))\n      badExports.node = getBadExports(plugin, pluginNodeExports, apis.node) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)\n      plugin.browserAPIs.map(browserAPI =>\n        apiToPlugins[browserAPI].push(plugin.name)\n      )\n      badExports.browser = getBadExports(\n        plugin,\n        pluginBrowserExports,\n        apis.browser\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)\n      plugin.ssrAPIs.map(ssrAPI => apiToPlugins[ssrAPI].push(plugin.name))\n      badExports.ssr = getBadExports(plugin, pluginSSRExports, apis.ssr) // Collate any bad exports\n    }\n  })\n\n  return { apiToPlugins, flattenedPlugins, badExports }\n}\n\nconst handleMultipleReplaceRenderers = ({ apiToPlugins, flattenedPlugins }) => {\n  // multiple replaceRenderers may cause problems at build time\n  if (apiToPlugins.replaceRenderer.length > 1) {\n    const rendererPlugins = [...apiToPlugins.replaceRenderer]\n\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${\n            fp.name\n          }`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nmodule.exports = {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n}\n"]}