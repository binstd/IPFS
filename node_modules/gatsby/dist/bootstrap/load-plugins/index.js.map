{"version":3,"sources":["../../../src/bootstrap/load-plugins/index.js"],"names":["_","require","store","nodeAPIs","browserAPIs","ssrAPIs","loadPlugins","collatePluginAPIs","handleBadExports","handleMultipleReplaceRenderers","apis","node","keys","browser","ssr","flattenPlugins","flattened","extractPlugins","plugin","pluginOptions","plugins","forEach","push","subPlugin","module","exports","config","flattenedPlugins","x","apiToPlugins","badExports","isBad","process","env","NODE_ENV","exit","dispatch","type","payload"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;eAEkBA,QAAS,aAAT,C;IAAVC,K,YAAAA,K;;AACR,IAAMC,WAAWF,QAAS,2BAAT,CAAjB;AACA,IAAMG,cAAcH,QAAS,8BAAT,CAApB;AACA,IAAMI,UAAUJ,QAAS,iCAAT,CAAhB;AACA,IAAMK,cAAcL,QAAS,QAAT,CAApB;;gBAKIA,QAAS,YAAT,C;IAHFM,iB,aAAAA,iB;IACAC,gB,aAAAA,gB;IACAC,8B,aAAAA,8B;;AAGF,IAAMC,OAAO;AACXC,QAAMX,EAAEY,IAAF,CAAOT,QAAP,CADK;AAEXU,WAASb,EAAEY,IAAF,CAAOR,WAAP,CAFE;AAGXU,OAAKd,EAAEY,IAAF,CAAOP,OAAP;;AAGP;AACA;AACA;AARa,CAAb,CASA,IAAMU,iBAAiB,SAAjBA,cAAiB,UAAW;AAChC,MAAMC,YAAY,EAAlB;AACA,MAAMC,iBAAiB,SAAjBA,cAAiB,SAAU;AAC/BC,WAAOC,aAAP,CAAqBC,OAArB,CAA6BC,OAA7B,CAAqC,qBAAa;AAChDL,gBAAUM,IAAV,CAAeC,SAAf;AACAN,qBAAeM,SAAf;AACD,KAHD;AAID,GALD;;AAOAH,UAAQC,OAAR,CAAgB,kBAAU;AACxBL,cAAUM,IAAV,CAAeJ,MAAf;AACAD,mBAAeC,MAAf;AACD,GAHD;;AAKA,SAAOF,SAAP;AACD,CAfD;;AAiBAQ,OAAOC,OAAP,4EAAiB;AAAA,MAAOC,MAAP,uEAAgB,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEOpB,YAAYoB,MAAZ,CAFP;;AAAA;AAETN,iBAFS;;;AAIf;AACIO,0BALW,GAKQZ,eAAeK,OAAf,CALR;;AAOf;AACA;;AACMQ,WATS,GASLrB,kBAAkB,EAAEG,IAAF,EAAQiB,gBAAR,EAAlB,CATK;;AAUfA,6BAAmBC,EAAED,gBAArB;AACME,sBAXS,GAWMD,EAAEC,YAXR;AAYTC,oBAZS,GAYIF,EAAEE,UAZN;;AAcf;;AACMC,eAfS,GAeDvB,iBAAiB,EAAEE,IAAF,EAAQoB,UAAR,EAAjB,CAfC;;AAgBf,cAAIC,SAASC,QAAQC,GAAR,CAAYC,QAAZ,KAA0B,YAAvC,EAAoDF,QAAQG,IAAR,CAAa,CAAb,EAhBrC,CAgBqD;;AAEpE;AACAR,6BAAmBlB,+BAA+B;AAChDoB,wBADgD;AAEhDF;AAFgD,WAA/B,CAAnB;;AAKA;AACAzB,gBAAMkC,QAAN,CAAe;AACbC,kBAAO,4BADM;AAEbC,qBAASX;AAFI,WAAf;;AAKAzB,gBAAMkC,QAAN,CAAe;AACbC,kBAAO,yBADM;AAEbC,qBAAST;AAFI,WAAf;;AAKA;AACA3B,gBAAMkC,QAAN,CAAe;AACbC,kBAAO,kBADM;AAEbC,qBAASlB;AAFI,WAAf;;AApCe,2CAyCRO,gBAzCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","file":"index.js","sourcesContent":["const _ = require(`lodash`)\n\nconst { store } = require(`../../redux`)\nconst nodeAPIs = require(`../../utils/api-node-docs`)\nconst browserAPIs = require(`../../utils/api-browser-docs`)\nconst ssrAPIs = require(`../../../cache-dir/api-ssr-docs`)\nconst loadPlugins = require(`./load`)\nconst {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n} = require(`./validate`)\n\nconst apis = {\n  node: _.keys(nodeAPIs),\n  browser: _.keys(browserAPIs),\n  ssr: _.keys(ssrAPIs),\n}\n\n// Create a \"flattened\" array of plugins with all subplugins\n// brought to the top-level. This simplifies running gatsby-* files\n// for subplugins.\nconst flattenPlugins = plugins => {\n  const flattened = []\n  const extractPlugins = plugin => {\n    plugin.pluginOptions.plugins.forEach(subPlugin => {\n      flattened.push(subPlugin)\n      extractPlugins(subPlugin)\n    })\n  }\n\n  plugins.forEach(plugin => {\n    flattened.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  return flattened\n}\n\nmodule.exports = async (config = {}) => {\n  // Collate internal plugins, site config plugins, site default plugins\n  const plugins = await loadPlugins(config)\n\n  // Create a flattened array of the plugins\n  let flattenedPlugins = flattenPlugins(plugins)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ apis, flattenedPlugins })\n  flattenedPlugins = x.flattenedPlugins\n  const apiToPlugins = x.apiToPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  const isBad = handleBadExports({ apis, badExports })\n  if (isBad && process.env.NODE_ENV === `production`) process.exit(1) // TODO: change to panicOnBuild\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    apiToPlugins,\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  store.dispatch({\n    type: `SET_SITE_API_TO_PLUGINS`,\n    payload: apiToPlugins,\n  })\n\n  // TODO: Is this used? plugins and flattenedPlugins may be out of sync\n  store.dispatch({\n    type: `SET_SITE_PLUGINS`,\n    payload: plugins,\n  })\n\n  return flattenedPlugins\n}\n"]}