{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.js"],"names":["_","require","slash","fs","path","crypto","glob","store","createFileContentHash","root","globPattern","hash","createHash","files","sync","nodir","forEach","update","readFileSync","filepath","digest","resolvePlugin","pluginName","existsSync","resolvedPath","resolve","packageJSON","JSON","parse","name","id","version","Error","dirname","err","module","exports","config","plugins","processPlugin","isString","plugin","info","pluginOptions","subplugins","options","push","p","merge","internalPlugins","absPath","join","__dirname","relPath","process","cwd","program","getState","directory","pathCheck"],"mappings":"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","file":"load.js","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\nconst { store } = require(`../../redux`)\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!fs.existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (fs.existsSync(resolvedPath)) {\n      if (fs.existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          id: `Plugin ${packageJSON.name || pluginName}`,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      id: `Plugin ${packageJSON.name}`,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(`Unable to find plugin \"${pluginName}\"`)\n  }\n}\n\nmodule.exports = async (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/component-layout-creator`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/query-runner`,\n  ]\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: `Plugin default-site-plugin`,\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n  plugins.push(\n    processPlugin({\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: slash(path.join(program.directory, `src/pages`)),\n        pathCheck: false,\n      },\n    })\n  )\n\n  return plugins\n}\n"]}