{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["fs","require","babylon","traverse","default","get","module","exports","modulePath","resolver","resolve","absPath","exportNames","err","code","readFileSync","babylonOpts","sourceType","allowImportExportEverywhere","plugins","ast","parse","ExportNamedDeclaration","astPath","exportName","push","AssignmentExpression","nodeLeft","node","left","type","property","name"],"mappings":";;AACA,IAAMA,KAAKC,QAAS,IAAT,CAAX;AACA,IAAMC,UAAUD,QAAS,SAAT,CAAhB;AACA,IAAME,WAAWF,QAAS,gBAAT,EAA0BG,OAA3C;AACA,IAAMC,MAAMJ,QAAS,YAAT,CAAZ;;AAEA;;;;;;;;;AASAK,OAAOC,OAAP,GAAiB,UAACC,UAAD,EAA4C;AAAA,MAA/BC,QAA+B,uEAApBR,QAAQS,OAAY;;AAC3D,MAAIC,gBAAJ;AACA,MAAMC,cAAc,EAApB;;AAEA,MAAI;AACFD,cAAUF,SAASD,UAAT,CAAV;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,WAAOD,WAAP,CADY,CACO;AACpB;AACD,MAAME,OAAOd,GAAGe,YAAH,CAAgBJ,OAAhB,EAA0B,MAA1B,CAAb,CAT2D,CASb;;AAE9C,MAAMK,cAAc;AAClBC,gBAAa,QADK;AAElBC,iCAA6B,IAFX;AAGlBC,aAAS,CACN,KADM,EAEN,eAFM,EAGN,kBAHM,EAIN,YAJM,EAKN,iBALM,EAMN,kBANM,EAON,iBAPM,EAQN,cARM,EASN,cATM,EAUN,eAVM,EAWN,MAXM;AAHS,GAApB;;AAkBA,MAAMC,MAAMlB,QAAQmB,KAAR,CAAcP,IAAd,EAAoBE,WAApB,CAAZ;;AAEA;AACAb,WAASiB,GAAT,EAAc;AACZ;AACAE,4BAAwB,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AAC/D,UAAMC,aAAanB,IACjBkB,OADiB,EAEhB,0CAFgB,CAAnB;AAIA,UAAIC,UAAJ,EAAgBZ,YAAYa,IAAZ,CAAiBD,UAAjB;AACjB,KARW;AASZE,0BAAsB,SAASA,oBAAT,CAA8BH,OAA9B,EAAuC;AAC3D,UAAMI,WAAWJ,QAAQK,IAAR,CAAaC,IAA9B;;AAEA,UAAIF,SAASG,IAAT,KAAmB,kBAAvB,EAA0C;;AAE1C;AACA,UAAIzB,IAAIsB,QAAJ,EAAe,aAAf,MAAkC,SAAtC,EAAgD;AAC9Cf,oBAAYa,IAAZ,CAAiBE,SAASI,QAAT,CAAkBC,IAAnC;AACD;;AAED;AACA,UACE3B,IAAIsB,QAAJ,EAAe,oBAAf,MAAyC,QAAzC,IACAtB,IAAIsB,QAAJ,EAAe,sBAAf,MAA2C,SAF7C,EAGE;AACAf,oBAAYa,IAAZ,CAAiBE,SAASI,QAAT,CAAkBC,IAAnC;AACD;AACF;AA1BW,GAAd;;AA6BA,SAAOpB,WAAP;AACD,CA9DD","file":"resolve-module-exports.js","sourcesContent":["// @flow\nconst fs = require(`fs`)\nconst babylon = require(`babylon`)\nconst traverse = require(`babel-traverse`).default\nconst get = require(`lodash/get`)\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {function} resolver\n */\nmodule.exports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  const babylonOpts = {\n    sourceType: `module`,\n    allowImportExportEverywhere: true,\n    plugins: [\n      `jsx`,\n      `doExpressions`,\n      `objectRestSpread`,\n      `decorators`,\n      `classProperties`,\n      `exportExtensions`,\n      `asyncGenerators`,\n      `functionBind`,\n      `functionSent`,\n      `dynamicImport`,\n      `flow`,\n    ],\n  }\n\n  const ast = babylon.parse(code, babylonOpts)\n\n  // extract names of exports from file\n  traverse(ast, {\n    // get foo from `export const foo = bar`\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const exportName = get(\n        astPath,\n        `node.declaration.declarations[0].id.name`\n      )\n      if (exportName) exportNames.push(exportName)\n    },\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  return exportNames\n}\n"]}