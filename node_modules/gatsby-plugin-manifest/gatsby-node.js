"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require("fs");
var path = require("path");
var Promise = require("bluebird");
var sharp = require("sharp");

var _require = require("./common.js"),
    defaultIcons = _require.defaultIcons,
    doesIconExist = _require.doesIconExist;

sharp.simd(true);

function generateIcons(icons, srcIcon) {
  return Promise.map(icons, function (icon) {
    var size = parseInt(icon.sizes.substring(0, icon.sizes.lastIndexOf("x")));
    var imgPath = path.join("public", icon.src);

    return sharp(srcIcon).resize(size).toFile(imgPath).then(function () {});
  });
}

exports.onPostBuild = function (args, pluginOptions) {
  return new Promise(function (resolve, reject) {
    var icon = pluginOptions.icon;

    var manifest = (0, _extends3.default)({}, pluginOptions);

    // Delete options we won't pass to the manifest.webmanifest.
    delete manifest.plugins;
    delete manifest.icon;

    // If icons are not manually defined, use the default icon set.
    if (!manifest.icons) {
      manifest.icons = defaultIcons;
    }

    // Determine destination path for icons.
    var iconPath = path.join("public", manifest.icons[0].src.substring(0, manifest.icons[0].src.lastIndexOf("/")));

    //create destination directory if it doesn't exist
    if (!fs.existsSync(iconPath)) {
      fs.mkdirSync(iconPath);
    }

    fs.writeFileSync(path.join("public", "manifest.webmanifest"), (0, _stringify2.default)(manifest));

    // Only auto-generate icons if a src icon is defined.
    if (icon !== undefined) {
      // Check if the icon exists
      if (!doesIconExist(icon)) {
        reject("icon (" + icon + ") does not exist as defined in gatsby-config.js. Make sure the file exists relative to the root of the site.");
      }
      generateIcons(manifest.icons, icon).then(function () {
        //images have been generated
        console.log("done generating icons for manifest");
        resolve();
      });
    } else {
      resolve();
    }
  });
};