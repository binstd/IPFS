{"data":{"markdownRemark":{"html":"<p>Thanks to everybody who has already been testing the release candidate. We’ve received some good feedback and as a result we’re going to do a second release candidate. The changes are minimal. We haven’t changed the behavior of any APIs we exposed in the previous release candidate. Here’s a summary of the changes:</p>\n<ul>\n<li>Introduced a new API (<code class=\"gatsby-code-text\">React.cloneElement</code>, see below for details).</li>\n<li>Fixed a bug related to validating <code class=\"gatsby-code-text\">propTypes</code> when using the new <code class=\"gatsby-code-text\">React.addons.createFragment</code> API.</li>\n<li>Improved a couple warning messages.</li>\n<li>Upgraded jstransform and esprima.</li>\n</ul>\n<p>The release candidate is available for download:</p>\n<ul>\n<li><strong>React</strong><br>\nDev build with warnings: <a href=\"https://fb.me/react-0.13.0-rc2.js\">https://fb.me/react-0.13.0-rc2.js</a><br>\nMinified build for production: <a href=\"https://fb.me/react-0.13.0-rc2.min.js\">https://fb.me/react-0.13.0-rc2.min.js</a>  </li>\n<li><strong>React with Add-Ons</strong><br>\nDev build with warnings: <a href=\"https://fb.me/react-with-addons-0.13.0-rc2.js\">https://fb.me/react-with-addons-0.13.0-rc2.js</a><br>\nMinified build for production: <a href=\"https://fb.me/react-with-addons-0.13.0-rc2.min.js\">https://fb.me/react-with-addons-0.13.0-rc2.min.js</a>  </li>\n<li><strong>In-Browser JSX transformer</strong><br>\n<a href=\"https://fb.me/JSXTransformer-0.13.0-rc2.js\">https://fb.me/JSXTransformer-0.13.0-rc2.js</a></li>\n</ul>\n<p>We’ve also published version <code class=\"gatsby-code-text\">0.13.0-rc2</code> of the <code class=\"gatsby-code-text\">react</code> and <code class=\"gatsby-code-text\">react-tools</code> packages on npm and the <code class=\"gatsby-code-text\">react</code> package on bower.</p>\n<hr>\n<h2 id=\"reactcloneelement\"><a href=\"#reactcloneelement\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.cloneElement</h2>\n<p>In React v0.13 RC2 we will introduce a new API, similar to <code class=\"gatsby-code-text\">React.addons.cloneWithProps</code>, with this signature:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Unlike <code class=\"gatsby-code-text\">cloneWithProps</code>, this new function does not have any magic built-in behavior for merging <code class=\"gatsby-code-text\">style</code> and <code class=\"gatsby-code-text\">className</code> for the same reason we don’t have that feature from <code class=\"gatsby-code-text\">transferPropsTo</code>. Nobody is sure what exactly the complete list of magic things are, which makes it difficult to reason about the code and difficult to reuse when <code class=\"gatsby-code-text\">style</code> has a different signature (e.g. in the upcoming React Native).</p>\n<p><code class=\"gatsby-code-text\">React.cloneElement</code> is <em>almost</em> equivalent to:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>element.type</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">element</span><span class=\"token punctuation\">.</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>element.type</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>However, unlike JSX and <code class=\"gatsby-code-text\">cloneWithProps</code>, it also preserves <code class=\"gatsby-code-text\">ref</code>s. This means that if you get a child with a <code class=\"gatsby-code-text\">ref</code> on it, you won’t accidentally steal it from your ancestor. You will get the same <code class=\"gatsby-code-text\">ref</code> attached to your new element.</p>\n<p>One common pattern is to map over your children and add a new prop. There were many issues reported about <code class=\"gatsby-code-text\">cloneWithProps</code> losing the ref, making it harder to reason about your code. Now following the same pattern with <code class=\"gatsby-code-text\">cloneElement</code> will work as expected. For example:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> newChildren <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>Note: <code class=\"gatsby-code-text\">React.cloneElement(child, { ref: &#39;newRef&#39; })</code> <em>DOES</em> override the <code class=\"gatsby-code-text\">ref</code> so it is still not possible for two parents to have a ref to the same child, unless you use callback-refs.</p>\n</blockquote>\n<p>This was a critical feature to get into React 0.13 since props are now immutable. The upgrade path is often to clone the element, but by doing so you might lose the <code class=\"gatsby-code-text\">ref</code>. Therefore, we needed a nicer upgrade path here. As we were upgrading callsites at Facebook we realized that we needed this method. We got the same feedback from the community. Therefore we decided to make another RC before the final release to make sure we get this in.</p>\n<p>We plan to eventually deprecate <code class=\"gatsby-code-text\">React.addons.cloneWithProps</code>. We’re not doing it yet, but this is a good opportunity to start thinking about your own uses and consider using <code class=\"gatsby-code-text\">React.cloneElement</code> instead. We’ll be sure to ship a release with deprecation notices before we actually remove it so no immediate action is necessary.</p>","excerpt":"Thanks to everybody who has already been testing the release candidate. We’ve received some good feedback and as a result we’re going to do a second release candidate. The changes are minimal. We haven’t changed the behavior of any APIs we exposed in the previous release candidate. Here’s a summary of the changes: Introduced a new API ( , see below for details). Fixed a bug related to validating   when using the new   API. Improved a couple warning messages. Upgraded jstransform and esprima. The…","frontmatter":{"title":"React v0.13 RC2","next":null,"prev":null,"author":[{"frontmatter":{"name":"Sebastian Markbåge","url":"https://twitter.com/sebmarkbage"}}]},"fields":{"date":"March 02, 2015","path":null,"slug":"/blog/2015/03/03/react-v0.13-rc2.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"You Probably Don't Need Derived State"},"fields":{"slug":"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}},{"node":{"frontmatter":{"title":"React v16.4.0: Pointer Events"},"fields":{"slug":"/blog/2018/05/23/react-v-16-4.html"}}},{"node":{"frontmatter":{"title":"React v16.3.0: New lifecycles and context API"},"fields":{"slug":"/blog/2018/03/29/react-v-16-3.html"}}},{"node":{"frontmatter":{"title":"Update on Async Rendering"},"fields":{"slug":"/blog/2018/03/27/update-on-async-rendering.html"}}},{"node":{"frontmatter":{"title":"Sneak Peek: Beyond React 16"},"fields":{"slug":"/blog/2018/03/01/sneak-peek-beyond-react-16.html"}}},{"node":{"frontmatter":{"title":"Behind the Scenes: Improving the Repository Infrastructure"},"fields":{"slug":"/blog/2017/12/15/improving-the-repository-infrastructure.html"}}},{"node":{"frontmatter":{"title":"Introducing the React RFC Process"},"fields":{"slug":"/blog/2017/12/07/introducing-the-react-rfc-process.html"}}},{"node":{"frontmatter":{"title":"React v16.2.0: Improved Support for Fragments"},"fields":{"slug":"/blog/2017/11/28/react-v16.2.0-fragment-support.html"}}},{"node":{"frontmatter":{"title":"React v16.0"},"fields":{"slug":"/blog/2017/09/26/react-v16.0.html"}}},{"node":{"frontmatter":{"title":"React v15.6.2"},"fields":{"slug":"/blog/2017/09/25/react-v15.6.2.html"}}}]}},"pathContext":{"slug":"/blog/2015/03/03/react-v0.13-rc2.html"}}