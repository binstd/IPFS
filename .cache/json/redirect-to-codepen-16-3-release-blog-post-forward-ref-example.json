{"pathContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"function withTheme(Component) {\\n  // highlight-next-line\\n  function ThemedComponent({forwardedRef, ...rest}) {\\n    return (\\n      <ThemeContext.Consumer>\\n        {theme => (\\n          // Assign the custom prop \\\"forwardedRef\\\" as a ref\\n          // highlight-next-line\\n          <Component\\n            {...rest}\\n            ref={forwardedRef}\\n            theme={theme}\\n          />\\n        )}\\n      </ThemeContext.Consumer>\\n    );\\n  }\\n\\n  // Note the second param \\\"ref\\\" provided by React.forwardRef.\\n  // We can pass it along to ThemedComponent as a regular prop, e.g. \\\"forwardedRef\\\"\\n  // And it can then be attached to the Component.\\n  // highlight-range{1-3}\\n  return React.forwardRef((props, ref) => (\\n    <ThemedComponent {...props} forwardedRef={ref} />\\n  ));\\n}\\n\\n// Here we assume that FancyButton has been imported into the current scope\\nconst FancyThemedButton = withTheme(FancyButton);\\n\\n// Create a ref using the new Referenace API, as above\\n// highlight-next-line\\nconst fancyButtonRef = React.createRef();\\n\\n// fancyButtonRef will now point to FancyButton\\n// highlight-range{4}\\n<FancyThemedButton\\n  label=\\\"Click me!\\\"\\n  onClick={handleClick}\\n  ref={fancyButtonRef}\\n/>;\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}