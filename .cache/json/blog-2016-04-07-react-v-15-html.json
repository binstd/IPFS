{"data":{"markdownRemark":{"html":"<p>We would like to thank the React community for reporting issues and regressions in the release candidates on our <a href=\"https://github.com/facebook/react/issues/\">issue tracker</a>. Over the last few weeks we fixed those issues, and now, after two release candidates, we are excited to finally release the stable version of React 15.</p>\n<p>As a reminder, <a href=\"/blog/2016/02/19/new-versioning-scheme.html\">we’re switching to major versions</a> to indicate that we have been using React in production for a long time. This 15.0 release follows our previous 0.14 version and we’ll continue to follow semver like we’ve been doing since 2013. It’s also worth noting that <a href=\"/blog/2016/01/12/discontinuing-ie8-support.html\">we no longer actively support Internet Explorer 8</a>. We believe React will work in its current form there but we will not be prioritizing any efforts to fix new issues that only affect IE8.</p>\n<p>React 15 brings significant improvements to how we interact with the DOM:</p>\n<ul>\n<li>\n<p>We are now using <code class=\"gatsby-code-text\">document.createElement</code> instead of setting <code class=\"gatsby-code-text\">innerHTML</code> when mounting components. This allows us to get rid of the <code class=\"gatsby-code-text\">data-reactid</code> attribute on every node and make the DOM lighter. Using <code class=\"gatsby-code-text\">document.createElement</code> is also faster in modern browsers and fixes a number of edge cases related to SVG elements and running multiple copies of React on the same page.</p>\n</li>\n<li>\n<p>Historically our support for SVG has been incomplete, and many tags and attributes were missing. We heard you, and in React 15 we <a href=\"https://github.com/facebook/react/pull/6243\">added support for all the SVG attributes that are recognized by today’s browsers</a>. If we missed any of the attributes you’d like to use, please <a href=\"https://github.com/facebook/react/issues/1657\">let us know</a>. As a bonus, thanks to using <code class=\"gatsby-code-text\">document.createElement</code>, we no longer need to maintain a list of SVG tags, so any SVG tags that were previously unsupported should work just fine in React 15.</p>\n</li>\n<li>\n<p>We received some amazing contributions from the community in this release, and we would like to highlight <a href=\"https://github.com/facebook/react/pull/5753\">this pull request</a> by <a href=\"https://github.com/mwiencek\">Michael Wiencek</a> in particular. Thanks to Michael’s work, React 15 no longer emits extra <code class=\"gatsby-code-text\">&lt;span&gt;</code> nodes around the text, making the DOM output much cleaner. This was a longstanding annoyance for React users so it’s exciting to accept this as an outside contribution.</p>\n</li>\n</ul>\n<p>While this isn’t directly related to the release, we understand that in order to receive more community contributions like Michael’s, we need to communicate our goals and priorities more openly, and review pull requests more decisively. As a first step towards this, we started publishing <a href=\"https://github.com/reactjs/core-notes\">React core team weekly meeting notes</a> again. We also intend to introduce an RFC process inspired by <a href=\"https://github.com/emberjs/rfcs\">Ember RFCs</a> so external contributors can have more insight and influence in the future development of React. We will keep you updated about this on our blog.</p>\n<p>We are also experimenting with a new changelog format in this post. Every change now links to the corresponding pull request and mentions the author. Let us know whether you find this useful!</p>\n<h2 id=\"upgrade-guide\"><a href=\"#upgrade-guide\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upgrade Guide</h2>\n<p>As usual with major releases, React 15 will remove support for some of the patterns deprecated nine months ago in React 0.14. We know changes can be painful (the Facebook codebase has over 20,000 React components, and that’s not even counting React Native), so we always try to make changes gradually in order to minimize the pain.</p>\n<p>If your code is free of warnings when running under React 0.14, upgrading should be easy. The bulk of changes in this release are actually behind the scenes, impacting the way that React interacts with the DOM. The other substantial change is that React now supports the full range of SVG elements and attributes. Beyond that we have a large number of incremental improvements and additional warnings aimed to aid developers. We’ve also laid some groundwork in the core to bring you some new capabilities in future releases.</p>\n<p>See the changelog below for more details.</p>\n<h2 id=\"installation\"><a href=\"#installation\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h2>\n<p>We recommend using React from <code class=\"gatsby-code-text\">npm</code> and using a tool like browserify or webpack to build your code into a single bundle. To install the two packages:</p>\n<ul>\n<li><code class=\"gatsby-code-text\">npm install --save react react-dom</code></li>\n</ul>\n<p>Remember that by default, React runs extra checks and provides helpful warnings in development mode. When deploying your app, set the <code class=\"gatsby-code-text\">NODE_ENV</code> environment variable to <code class=\"gatsby-code-text\">production</code> to use the production build of React which does not include the development warnings and runs significantly faster.</p>\n<p>If you can’t use <code class=\"gatsby-code-text\">npm</code> yet, we provide pre-built browser builds for your convenience, which are also available in the <code class=\"gatsby-code-text\">react</code> package on bower.</p>\n<ul>\n<li><strong>React</strong><br>\nDev build with warnings: <a href=\"https://fb.me/react-15.0.0.js\">https://fb.me/react-15.0.0.js</a><br>\nMinified build for production: <a href=\"https://fb.me/react-15.0.0.min.js\">https://fb.me/react-15.0.0.min.js</a>  </li>\n<li><strong>React with Add-Ons</strong><br>\nDev build with warnings: <a href=\"https://fb.me/react-with-addons-15.0.0.js\">https://fb.me/react-with-addons-15.0.0.js</a><br>\nMinified build for production: <a href=\"https://fb.me/react-with-addons-15.0.0.min.js\">https://fb.me/react-with-addons-15.0.0.min.js</a>  </li>\n<li><strong>React DOM</strong> (include React in the page before React DOM)<br>\nDev build with warnings: <a href=\"https://fb.me/react-dom-15.0.0.js\">https://fb.me/react-dom-15.0.0.js</a><br>\nMinified build for production: <a href=\"https://fb.me/react-dom-15.0.0.min.js\">https://fb.me/react-dom-15.0.0.min.js</a>  </li>\n</ul>\n<h2 id=\"changelog\"><a href=\"#changelog\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changelog</h2>\n<h3 id=\"major-changes\"><a href=\"#major-changes\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Major changes</h3>\n<ul>\n<li>\n<h4 id=\"documentcreateelement-is-in-and-data-reactid-is-out\"><a href=\"#documentcreateelement-is-in-and-data-reactid-is-out\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">document.createElement</code> is in and <code class=\"gatsby-code-text\">data-reactid</code> is out</h4>\n<p>There were a number of large changes to our interactions with the DOM. One of the most noticeable changes is that we no longer set the <code class=\"gatsby-code-text\">data-reactid</code> attribute for each DOM node. While this will make it more difficult to know if a website is using React, the advantage is that the DOM is much more lightweight. This change was made possible by us switching to use <code class=\"gatsby-code-text\">document.createElement</code> on initial render. Previously we would generate a large string of HTML and then set <code class=\"gatsby-code-text\">node.innerHTML</code>. At the time, this was decided to be faster than using <code class=\"gatsby-code-text\">document.createElement</code> for the majority of cases and browsers that we supported. Browsers have continued to improve and so overwhelmingly this is no longer true. By using <code class=\"gatsby-code-text\">createElement</code> we can make other parts of React faster. The ids were used to map back from events to the original React component, meaning we had to do a bunch of work on every event, even though we cached this data heavily. As we’ve all experienced, caching and in particularly invalidating caches, can be error prone and we saw many hard to reproduce issues over the years as a result. Now we can build up a direct mapping at render time since we already have a handle on the node.  </p>\n<p><strong>Note:</strong> <code class=\"gatsby-code-text\">data-reactid</code> is still present for server-rendered content, however it is much smaller than before and is simply an auto-incrementing counter.  </p>\n<p><small><a href=\"https://github.com/sophiebits\">@sophiebits</a> in <a href=\"https://github.com/facebook/react/pull/5205\">#5205</a></small></p>\n</li>\n<li>\n<h4 id=\"no-more-extra-spans\"><a href=\"#no-more-extra-spans\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No more extra <code class=\"gatsby-code-text\">&lt;span&gt;</code>s</h4>\n<p>Another big change with our DOM interaction is how we render text blocks. Previously you may have noticed that React rendered a lot of extra <code class=\"gatsby-code-text\">&lt;span&gt;</code>s. For example, in our most basic example on the home page we render <code class=\"gatsby-code-text\">&lt;div&gt;Hello {this.props.name}&lt;/div&gt;</code>, resulting in markup that contained 2 <code class=\"gatsby-code-text\">&lt;span&gt;</code>s. Now we’ll render plain text nodes interspersed with comment nodes that are used for demarcation. This gives us the same ability to update individual pieces of text, without creating extra nested nodes. Very few people have depended on the actual markup generated here so it’s likely you are not impacted. However if you were targeting these <code class=\"gatsby-code-text\">&lt;span&gt;</code>s in your CSS, you will need to adjust accordingly. You can always render them explicitly in your components.  </p>\n<p><small><a href=\"https://github.com/mwiencek\">@mwiencek</a> in <a href=\"https://github.com/facebook/react/pull/5753\">#5753</a></small></p>\n</li>\n<li>\n<h4 id=\"rendering-null-now-uses-comment-nodes\"><a href=\"#rendering-null-now-uses-comment-nodes\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering <code class=\"gatsby-code-text\">null</code> now uses comment nodes</h4>\n<p>We’ve also made use of these comment nodes to change what <code class=\"gatsby-code-text\">null</code> renders to. Rendering to <code class=\"gatsby-code-text\">null</code> was a feature we added in React 0.11 and was implemented by rendering <code class=\"gatsby-code-text\">&lt;noscript&gt;</code> elements. By rendering to comment nodes now, there’s a chance some of your CSS will be targeting the wrong thing, specifically if you are making use of <code class=\"gatsby-code-text\">:nth-child</code> selectors. React’s use of the <code class=\"gatsby-code-text\">&lt;noscript&gt;</code> tag has always been considered an implementation detail of how React targets the DOM. We believe they are safe changes to make without going through a release with warnings detailing the subtle differences as they are details that should not be depended upon. Additionally, we have seen that these changes have improved React performance for many typical applications.  </p>\n<p><small><a href=\"https://github.com/sophiebits\">@sophiebits</a> in <a href=\"https://github.com/facebook/react/pull/5451\">#5451</a></small></p>\n</li>\n<li>\n<h4 id=\"functional-components-can-now-return-null-too\"><a href=\"#functional-components-can-now-return-null-too\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional components can now return <code class=\"gatsby-code-text\">null</code> too</h4>\n<p>We added support for <a href=\"/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\">defining stateless components as functions</a> in React 0.14. However, React 0.14 still allowed you to define a class component without extending <code class=\"gatsby-code-text\">React.Component</code> or using <code class=\"gatsby-code-text\">React.createClass()</code>, so <a href=\"https://github.com/facebook/react/issues/5355\">we couldn’t reliably tell if your component is a function or a class</a>, and did not allow returning <code class=\"gatsby-code-text\">null</code> from it. This issue is solved in React 15, and you can now return <code class=\"gatsby-code-text\">null</code> from any component, whether it is a class or a function.  </p>\n<p><small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5884\">#5884</a></small></p>\n</li>\n<li>\n<h4 id=\"improved-svg-support\"><a href=\"#improved-svg-support\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improved SVG support</h4>\n<p>All SVG tags are now fully supported. (Uncommon SVG tags are not present on the <code class=\"gatsby-code-text\">React.DOM</code> element helper, but JSX and <code class=\"gatsby-code-text\">React.createElement</code> work on all tag names.) All SVG attributes that are implemented by the browsers should be supported too. If you find any attributes that we have missed, please <a href=\"https://github.com/facebook/react/issues/1657\">let us know in this issue</a>.  </p>\n<p><small><a href=\"https://github.com/zpao\">@zpao</a> in <a href=\"https://github.com/facebook/react/pull/6243\">#6243</a></small></p>\n</li>\n</ul>\n<h3 id=\"breaking-changes\"><a href=\"#breaking-changes\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking changes</h3>\n<ul>\n<li>\n<h4 id=\"no-more-extra-spans-1\"><a href=\"#no-more-extra-spans-1\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No more extra <code class=\"gatsby-code-text\">&lt;span&gt;</code>s</h4>\n<p>It’s worth calling out the DOM structure changes above again, in particular the change from <code class=\"gatsby-code-text\">&lt;span&gt;</code>s. In the course of updating the Facebook codebase, we found a very small amount of code that was depending on the markup that React generated. Some of these cases were integration tests like WebDriver which were doing very specific XPath queries to target nodes. Others were simply tests using <code class=\"gatsby-code-text\">ReactDOM.renderToStaticMarkup</code> and comparing markup. Again, there were a very small number of changes that had to be made, but we don’t want anybody to be blindsided. We encourage everybody to run their test suites when upgrading and consider alternative approaches when possible. One approach that will work for some cases is to explicitly use <code class=\"gatsby-code-text\">&lt;span&gt;</code>s in your <code class=\"gatsby-code-text\">render</code> method.  </p>\n<p><small><a href=\"https://github.com/mwiencek\">@mwiencek</a> in <a href=\"https://github.com/facebook/react/pull/5753\">#5753</a></small></p>\n</li>\n<li>\n<h4 id=\"reactcloneelement-now-resolves-defaultprops\"><a href=\"#reactcloneelement-now-resolves-defaultprops\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">React.cloneElement()</code> now resolves <code class=\"gatsby-code-text\">defaultProps</code></h4>\n<p>We fixed a bug in <code class=\"gatsby-code-text\">React.cloneElement()</code> that some components may rely on. If some of the <code class=\"gatsby-code-text\">props</code> received by <code class=\"gatsby-code-text\">cloneElement()</code> are <code class=\"gatsby-code-text\">undefined</code>, it used to return an element with <code class=\"gatsby-code-text\">undefined</code> values for those props. In React 15, we’re changing it to be consistent with <code class=\"gatsby-code-text\">createElement()</code>. Now any <code class=\"gatsby-code-text\">undefined</code> props passed to <code class=\"gatsby-code-text\">cloneElement()</code> are resolved to the corresponding component’s <code class=\"gatsby-code-text\">defaultProps</code>. Only one of our 20,000 React components was negatively affected by this so we feel comfortable releasing this change without keeping the old behavior for another release cycle.  </p>\n<p><small><a href=\"https://github.com/truongduy134\">@truongduy134</a> in <a href=\"https://github.com/facebook/react/pull/5997\">#5997</a></small></p>\n</li>\n<li>\n<h4 id=\"reactperfgetlastmeasurements-is-opaque\"><a href=\"#reactperfgetlastmeasurements-is-opaque\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">ReactPerf.getLastMeasurements()</code> is opaque</h4>\n<p>This change won’t affect applications but may break some third-party tools. We are <a href=\"https://github.com/facebook/react/pull/6046\">revamping <code class=\"gatsby-code-text\">ReactPerf</code> implementation</a> and plan to release it during the 15.x cycle. The internal performance measurement format is subject to change so, for the time being, we consider the return value of <code class=\"gatsby-code-text\">ReactPerf.getLastMeasurements()</code> an opaque data structure that should not be relied upon.  </p>\n<p><small><a href=\"https://github.com/gaearon\">@gaearon</a> in <a href=\"https://github.com/facebook/react/pull/6286\">#6286</a></small></p>\n</li>\n<li>\n<h4 id=\"removed-deprecations\"><a href=\"#removed-deprecations\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removed deprecations</h4>\n<p>These deprecations were introduced nine months ago in v0.14 with a warning and are removed:</p>\n<ul>\n<li>\n<p>Deprecated APIs are removed from the <code class=\"gatsby-code-text\">React</code> top-level export: <code class=\"gatsby-code-text\">findDOMNode</code>, <code class=\"gatsby-code-text\">render</code>, <code class=\"gatsby-code-text\">renderToString</code>, <code class=\"gatsby-code-text\">renderToStaticMarkup</code>, and <code class=\"gatsby-code-text\">unmountComponentAtNode</code>. As a reminder, they are now available on <code class=\"gatsby-code-text\">ReactDOM</code> and <code class=\"gatsby-code-text\">ReactDOMServer</code>.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5832\">#5832</a></small></p>\n</li>\n<li>\n<p>Deprecated addons are removed: <code class=\"gatsby-code-text\">batchedUpdates</code> and <code class=\"gatsby-code-text\">cloneWithProps</code>.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5859\">#5859</a>, <a href=\"https://github.com/zpao\">@zpao</a> in <a href=\"https://github.com/facebook/react/pull/6016\">#6016</a></small></p>\n</li>\n<li>\n<p>Deprecated component instance methods are removed: <code class=\"gatsby-code-text\">setProps</code>, <code class=\"gatsby-code-text\">replaceProps</code>, and <code class=\"gatsby-code-text\">getDOMNode</code>.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5570\">#5570</a></small></p>\n</li>\n<li>\n<p>Deprecated CommonJS <code class=\"gatsby-code-text\">react/addons</code> entry point is removed. As a reminder, you should use separate <code class=\"gatsby-code-text\">react-addons-*</code> packages instead. This only applies if you use the CommonJS builds.<br>\n<small><a href=\"https://github.com/gaearon\">@gaearon</a> in <a href=\"https://github.com/facebook/react/pull/6285\">#6285</a></small></p>\n</li>\n<li>\n<p>Passing <code class=\"gatsby-code-text\">children</code> to void elements like <code class=\"gatsby-code-text\">&lt;input&gt;</code> was deprecated, and now throws an error.<br>\n<small><a href=\"https://github.com/jonhester\">@jonhester</a> in <a href=\"https://github.com/facebook/react/pull/3372\">#3372</a></small></p>\n</li>\n<li>\n<p>React-specific properties on DOM <code class=\"gatsby-code-text\">refs</code> (e.g. <code class=\"gatsby-code-text\">this.refs.div.props</code>) were deprecated, and are removed now.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5495\">#5495</a></small></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"new-deprecations-introduced-with-a-warning\"><a href=\"#new-deprecations-introduced-with-a-warning\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New deprecations, introduced with a warning</h3>\n<p>Each of these changes will continue to work as before with a new warning until the release of React 16 so you can upgrade your code gradually.</p>\n<ul>\n<li>\n<p><code class=\"gatsby-code-text\">LinkedStateMixin</code> and <code class=\"gatsby-code-text\">valueLink</code> are now deprecated due to very low popularity. If you need this, you can use a wrapper component that implements the same behavior: <a href=\"https://www.npmjs.com/package/react-linked-input\">react-linked-input</a>.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/6127\">#6127</a></small></p>\n</li>\n<li>\n<p>Future versions of React will treat <code class=\"gatsby-code-text\">&lt;input value={null}&gt;</code> as a request to clear the input. However, React 0.14 has been ignoring <code class=\"gatsby-code-text\">value={null}</code>. React 15 warns you on a <code class=\"gatsby-code-text\">null</code> input value and offers you to clarify your intention. To fix the warning, you may explicitly pass an empty string to clear a controlled input, or pass <code class=\"gatsby-code-text\">undefined</code> to make the input uncontrolled.<br>\n<small><a href=\"https://github.com/antoaravinth\">@antoaravinth</a> in <a href=\"https://github.com/facebook/react/pull/5048\">#5048</a></small></p>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">ReactPerf.printDOM()</code> was renamed to <code class=\"gatsby-code-text\">ReactPerf.printOperations()</code>, and <code class=\"gatsby-code-text\">ReactPerf.getMeasurementsSummaryMap()</code> was renamed to <code class=\"gatsby-code-text\">ReactPerf.getWasted()</code>.<br>\n<small><a href=\"https://github.com/gaearon\">@gaearon</a> in <a href=\"https://github.com/facebook/react/pull/6287\">#6287</a></small></p>\n</li>\n</ul>\n<h3 id=\"new-helpful-warnings\"><a href=\"#new-helpful-warnings\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New helpful warnings</h3>\n<ul>\n<li>\n<p>If you use a minified copy of the <em>development</em> build, React DOM kindly encourages you to use the faster production build instead.<br>\n<small><a href=\"https://github.com/sophiebits\">@sophiebits</a> in <a href=\"https://github.com/facebook/react/pull/5083\">#5083</a></small></p>\n</li>\n<li>\n<p>React DOM: When specifying a unit-less CSS value as a string, a future version will not add <code class=\"gatsby-code-text\">px</code> automatically. This version now warns in this case (ex: writing <code class=\"gatsby-code-text\">style={{width: &#39;300&#39;}}</code>. Unitless <em>number</em> values like <code class=\"gatsby-code-text\">width: 300</code> are unchanged.<br>\n<small><a href=\"https://github.com/pluma\">@pluma</a> in <a href=\"https://github.com/facebook/react/pull/5140\">#5140</a></small></p>\n</li>\n<li>\n<p>Synthetic Events will now warn when setting and accessing properties (which will not get cleared appropriately), as well as warn on access after an event has been returned to the pool.<br>\n<small><a href=\"https://github.com/kentcdodds\">@kentcdodds</a> in <a href=\"https://github.com/facebook/react/pull/5940\">#5940</a> and <a href=\"https://github.com/koba04\">@koba04</a> in <a href=\"https://github.com/facebook/react/pull/5947\">#5947</a></small></p>\n</li>\n<li>\n<p>Elements will now warn when attempting to read <code class=\"gatsby-code-text\">ref</code> and <code class=\"gatsby-code-text\">key</code> from the props.<br>\n<small><a href=\"https://github.com/prometheansacrifice\">@prometheansacrifice</a> in <a href=\"https://github.com/facebook/react/pull/5744\">#5744</a></small></p>\n</li>\n<li>\n<p>React will now warn if you pass a different <code class=\"gatsby-code-text\">props</code> object to <code class=\"gatsby-code-text\">super()</code> in the constructor.<br>\n<small><a href=\"https://github.com/prometheansacrifice\">@prometheansacrifice</a> in <a href=\"https://github.com/facebook/react/pull/5346\">#5346</a></small></p>\n</li>\n<li>\n<p>React will now warn if you call <code class=\"gatsby-code-text\">setState()</code> inside <code class=\"gatsby-code-text\">getChildContext()</code>.<br>\n<small><a href=\"https://github.com/raineroviir\">@raineroviir</a> in <a href=\"https://github.com/facebook/react/pull/6121\">#6121</a></small></p>\n</li>\n<li>\n<p>React DOM now attempts to warn for mistyped event handlers on DOM elements, such as <code class=\"gatsby-code-text\">onclick</code> which should be <code class=\"gatsby-code-text\">onClick</code>.<br>\n<small><a href=\"https://github.com/ali\">@ali</a> in <a href=\"https://github.com/facebook/react/pull/5361\">#5361</a></small></p>\n</li>\n<li>\n<p>React DOM now warns about <code class=\"gatsby-code-text\">NaN</code> values in <code class=\"gatsby-code-text\">style</code>.<br>\n<small><a href=\"https://github.com/jontewks\">@jontewks</a> in <a href=\"https://github.com/facebook/react/pull/5811\">#5811</a></small></p>\n</li>\n<li>\n<p>React DOM now warns if you specify both <code class=\"gatsby-code-text\">value</code> and <code class=\"gatsby-code-text\">defaultValue</code> for an input.<br>\n<small><a href=\"https://github.com/mgmcdermott\">@mgmcdermott</a> in <a href=\"https://github.com/facebook/react/pull/5823\">#5823</a></small></p>\n</li>\n<li>\n<p>React DOM now warns if an input switches between being controlled and uncontrolled.<br>\n<small><a href=\"https://github.com/TheBlasfem\">@TheBlasfem</a> in <a href=\"https://github.com/facebook/react/pull/5864\">#5864</a></small></p>\n</li>\n<li>\n<p>React DOM now warns if you specify <code class=\"gatsby-code-text\">onFocusIn</code> or <code class=\"gatsby-code-text\">onFocusOut</code> handlers as they are unnecessary in React.<br>\n<small><a href=\"https://github.com/jontewks\">@jontewks</a> in <a href=\"https://github.com/facebook/react/pull/6296\">#6296</a></small></p>\n</li>\n<li>\n<p>React now prints a descriptive error message when you pass an invalid callback as the last argument to <code class=\"gatsby-code-text\">ReactDOM.render()</code>, <code class=\"gatsby-code-text\">this.setState()</code>, or <code class=\"gatsby-code-text\">this.forceUpdate()</code>.<br>\n<small><a href=\"https://github.com/conorhastings\">@conorhastings</a> in <a href=\"https://github.com/facebook/react/pull/5193\">#5193</a> and <a href=\"https://github.com/gaearon\">@gaearon</a> in <a href=\"https://github.com/facebook/react/pull/6310\">#6310</a></small></p>\n</li>\n<li>\n<p>Add-Ons: <code class=\"gatsby-code-text\">TestUtils.Simulate()</code> now prints a helpful message if you attempt to use it with shallow rendering.<br>\n<small><a href=\"https://github.com/conorhastings\">@conorhastings</a> in <a href=\"https://github.com/facebook/react/pull/5358\">#5358</a></small></p>\n</li>\n<li>\n<p>PropTypes: <code class=\"gatsby-code-text\">arrayOf()</code> and <code class=\"gatsby-code-text\">objectOf()</code> provide better error messages for invalid arguments.<br>\n<small><a href=\"https://github.com/chicoxyzzy\">@chicoxyzzy</a> in <a href=\"https://github.com/facebook/react/pull/5390\">#5390</a></small></p>\n</li>\n</ul>\n<h3 id=\"notable-bug-fixes\"><a href=\"#notable-bug-fixes\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notable bug fixes</h3>\n<ul>\n<li>\n<p>Fixed multiple small memory leaks.<br>\n<small><a href=\"https://github.com/sophiebits\">@sophiebits</a> in <a href=\"https://github.com/facebook/react/pull/4983\">#4983</a> and <a href=\"https://github.com/victor-homyakov\">@victor-homyakov</a> in <a href=\"https://github.com/facebook/react/pull/6309\">#6309</a></small></p>\n</li>\n<li>\n<p>Input events are handled more reliably in IE 10 and IE 11; spurious events no longer fire when using a placeholder.<br>\n<small><a href=\"https://github.com/jquense\">@jquense</a> in <a href=\"https://github.com/facebook/react/pull/4051\">#4051</a></small></p>\n</li>\n<li>\n<p>The <code class=\"gatsby-code-text\">componentWillReceiveProps()</code> lifecycle method is now consistently called when <code class=\"gatsby-code-text\">context</code> changes.<br>\n<small><a href=\"https://github.com/milesj\">@milesj</a> in <a href=\"https://github.com/facebook/react/pull/5787\">#5787</a></small></p>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">React.cloneElement()</code> doesn’t append slash to an existing <code class=\"gatsby-code-text\">key</code> when used inside <code class=\"gatsby-code-text\">React.Children.map()</code>.<br>\n<small><a href=\"https://github.com/ianobermiller\">@ianobermiller</a> in <a href=\"https://github.com/facebook/react/pull/5892\">#5892</a></small></p>\n</li>\n<li>\n<p>React DOM now supports the <code class=\"gatsby-code-text\">cite</code> and <code class=\"gatsby-code-text\">profile</code> HTML attributes.<br>\n<small><a href=\"https://github.com/AprilArcus\">@AprilArcus</a> in <a href=\"https://github.com/facebook/react/pull/6094\">#6094</a> and <a href=\"https://github.com/saiichihashimoto\">@saiichihashimoto</a> in <a href=\"https://github.com/facebook/react/pull/6032\">#6032</a></small></p>\n</li>\n<li>\n<p>React DOM now supports <code class=\"gatsby-code-text\">cssFloat</code>, <code class=\"gatsby-code-text\">gridRow</code> and <code class=\"gatsby-code-text\">gridColumn</code> CSS properties.<br>\n<small><a href=\"https://github.com/stevenvachon\">@stevenvachon</a> in <a href=\"https://github.com/facebook/react/pull/6133\">#6133</a> and  <a href=\"https://github.com/mnordick\">@mnordick</a> in <a href=\"https://github.com/facebook/react/pull/4779\">#4779</a></small></p>\n</li>\n<li>\n<p>React DOM now correctly handles <code class=\"gatsby-code-text\">borderImageOutset</code>, <code class=\"gatsby-code-text\">borderImageWidth</code>, <code class=\"gatsby-code-text\">borderImageSlice</code>, <code class=\"gatsby-code-text\">floodOpacity</code>, <code class=\"gatsby-code-text\">strokeDasharray</code>, and <code class=\"gatsby-code-text\">strokeMiterlimit</code> as unitless CSS properties.<br>\n<small><a href=\"https://github.com/rofrischmann\">@rofrischmann</a> in <a href=\"https://github.com/facebook/react/pull/6210\">#6210</a> and <a href=\"https://github.com/facebook/react/pull/6270\">#6270</a></small></p>\n</li>\n<li>\n<p>React DOM now supports the <code class=\"gatsby-code-text\">onAnimationStart</code>, <code class=\"gatsby-code-text\">onAnimationEnd</code>, <code class=\"gatsby-code-text\">onAnimationIteration</code>, <code class=\"gatsby-code-text\">onTransitionEnd</code>, and <code class=\"gatsby-code-text\">onInvalid</code> events. Support for <code class=\"gatsby-code-text\">onLoad</code> has been added to <code class=\"gatsby-code-text\">object</code> elements.<br>\n<small><a href=\"https://github.com/tomduncalf\">@tomduncalf</a> in <a href=\"https://github.com/facebook/react/pull/5187\">#5187</a>,  <a href=\"https://github.com/milesj\">@milesj</a> in <a href=\"https://github.com/facebook/react/pull/6005\">#6005</a>, and <a href=\"https://github.com/ara4n\">@ara4n</a> in <a href=\"https://github.com/facebook/react/pull/5781\">#5781</a></small></p>\n</li>\n<li>\n<p>React DOM now defaults to using DOM attributes instead of properties, which fixes a few edge case bugs. Additionally the nullification of values (ex: <code class=\"gatsby-code-text\">href={null}</code>) now results in the forceful removal, no longer trying to set to the default value used by browsers in the absence of a value.<br>\n<small><a href=\"https://github.com/syranide\">@syranide</a> in <a href=\"https://github.com/facebook/react/pull/1510\">#1510</a></small></p>\n</li>\n<li>\n<p>React DOM does not mistakingly coerce <code class=\"gatsby-code-text\">children</code> to strings for Web Components.<br>\n<small><a href=\"https://github.com/jimfb\">@jimfb</a> in <a href=\"https://github.com/facebook/react/pull/5093\">#5093</a></small></p>\n</li>\n<li>\n<p>React DOM now correctly normalizes SVG <code class=\"gatsby-code-text\">&lt;use&gt;</code> events.<br>\n<small><a href=\"https://github.com/edmellum\">@edmellum</a> in <a href=\"https://github.com/facebook/react/pull/5720\">#5720</a></small></p>\n</li>\n<li>\n<p>React DOM does not throw if a <code class=\"gatsby-code-text\">&lt;select&gt;</code> is unmounted while its <code class=\"gatsby-code-text\">onChange</code> handler is executing.<br>\n<small><a href=\"https://github.com/sambev\">@sambev</a> in <a href=\"https://github.com/facebook/react/pull/6028\">#6028</a></small></p>\n</li>\n<li>\n<p>React DOM does not throw in Windows 8 apps.<br>\n<small><a href=\"https://github.com/Andrew8xx8\">@Andrew8xx8</a> in <a href=\"https://github.com/facebook/react/pull/6063\">#6063</a></small></p>\n</li>\n<li>\n<p>React DOM does not throw when asynchronously unmounting a child with a <code class=\"gatsby-code-text\">ref</code>.<br>\n<small><a href=\"https://github.com/yiminghe\">@yiminghe</a> in <a href=\"https://github.com/facebook/react/pull/6095\">#6095</a></small></p>\n</li>\n<li>\n<p>React DOM no longer forces synchronous layout because of scroll position tracking.<br>\n<small><a href=\"https://github.com/syranide\">@syranide</a> in <a href=\"https://github.com/facebook/react/pull/2271\">#2271</a></small></p>\n</li>\n<li>\n<p><code class=\"gatsby-code-text\">Object.is</code> is used in a number of places to compare values, which leads to fewer false positives, especially involving <code class=\"gatsby-code-text\">NaN</code>. In particular, this affects the <code class=\"gatsby-code-text\">shallowCompare</code> add-on.<br>\n<small><a href=\"https://github.com/chicoxyzzy\">@chicoxyzzy</a> in <a href=\"https://github.com/facebook/react/pull/6132\">#6132</a></small></p>\n</li>\n<li>\n<p>Add-Ons: ReactPerf no longer instruments adding or removing an event listener because they don’t really touch the DOM due to event delegation.<br>\n<small><a href=\"https://github.com/antoaravinth\">@antoaravinth</a> in <a href=\"https://github.com/facebook/react/pull/5209\">#5209</a></small></p>\n</li>\n</ul>\n<h3 id=\"other-improvements\"><a href=\"#other-improvements\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Other improvements</h3>\n<ul>\n<li>\n<p>React now uses <code class=\"gatsby-code-text\">loose-envify</code> instead of <code class=\"gatsby-code-text\">envify</code> so it installs fewer transitive dependencies.<br>\n<small><a href=\"https://github.com/qerub\">@qerub</a> in <a href=\"https://github.com/facebook/react/pull/6303\">#6303</a></small></p>\n</li>\n<li>\n<p>Shallow renderer now exposes <code class=\"gatsby-code-text\">getMountedInstance()</code>.<br>\n<small><a href=\"https://github.com/glenjamin\">@glenjamin</a> in <a href=\"https://github.com/facebook/react/pull/4918\">#4918</a></small></p>\n</li>\n<li>\n<p>Shallow renderer now returns the rendered output from <code class=\"gatsby-code-text\">render()</code>.<br>\n<small><a href=\"https://github.com/simonewebdesign\">@simonewebdesign</a> in <a href=\"https://github.com/facebook/react/pull/5411\">#5411</a></small></p>\n</li>\n<li>\n<p>React no longer depends on ES5 <em>shams</em> for <code class=\"gatsby-code-text\">Object.create</code> and <code class=\"gatsby-code-text\">Object.freeze</code> in older environments. It still, however, requires ES5 <em>shims</em> in those environments.<br>\n<small><a href=\"https://github.com/dgreensp\">@dgreensp</a> in <a href=\"https://github.com/facebook/react/pull/4959\">#4959</a></small></p>\n</li>\n<li>\n<p>React DOM now allows <code class=\"gatsby-code-text\">data-</code> attributes with names that start with numbers.<br>\n<small><a href=\"https://github.com/nLight\">@nLight</a> in <a href=\"https://github.com/facebook/react/pull/5216\">#5216</a></small></p>\n</li>\n<li>\n<p>React DOM adds a new <code class=\"gatsby-code-text\">suppressContentEditableWarning</code> prop for components like <a href=\"https://facebook.github.io/draft-js/\">Draft.js</a> that intentionally manage <code class=\"gatsby-code-text\">contentEditable</code> children with React.<br>\n<small><a href=\"https://github.com/mxstbr\">@mxstbr</a> in <a href=\"https://github.com/facebook/react/pull/6112\">#6112</a></small></p>\n</li>\n<li>\n<p>React improves the performance for <code class=\"gatsby-code-text\">createClass()</code> on complex specs.<br>\n<small><a href=\"https://github.com/sophiebits\">@sophiebits</a> in <a href=\"https://github.com/facebook/react/pull/5550\">#5550</a></small></p>\n</li>\n</ul>","excerpt":"We would like to thank the React community for reporting issues and regressions in the release candidates on our  issue tracker . Over the last few weeks we fixed those issues, and now, after two release candidates, we are excited to finally release the stable version of React 15. As a reminder,  we’re switching to major versions  to indicate that we have been using React in production for a long time. This 15.0 release follows our previous 0.14 version and we’ll continue to follow semver like…","frontmatter":{"title":"React v15.0","next":null,"prev":null,"author":[{"frontmatter":{"name":"Dan Abramov","url":"https://twitter.com/dan_abramov"}}]},"fields":{"date":"April 06, 2016","path":null,"slug":"/blog/2016/04/07/react-v15.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"You Probably Don't Need Derived State"},"fields":{"slug":"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}},{"node":{"frontmatter":{"title":"React v16.4.0: Pointer Events"},"fields":{"slug":"/blog/2018/05/23/react-v-16-4.html"}}},{"node":{"frontmatter":{"title":"React v16.3.0: New lifecycles and context API"},"fields":{"slug":"/blog/2018/03/29/react-v-16-3.html"}}},{"node":{"frontmatter":{"title":"Update on Async Rendering"},"fields":{"slug":"/blog/2018/03/27/update-on-async-rendering.html"}}},{"node":{"frontmatter":{"title":"Sneak Peek: Beyond React 16"},"fields":{"slug":"/blog/2018/03/01/sneak-peek-beyond-react-16.html"}}},{"node":{"frontmatter":{"title":"Behind the Scenes: Improving the Repository Infrastructure"},"fields":{"slug":"/blog/2017/12/15/improving-the-repository-infrastructure.html"}}},{"node":{"frontmatter":{"title":"Introducing the React RFC Process"},"fields":{"slug":"/blog/2017/12/07/introducing-the-react-rfc-process.html"}}},{"node":{"frontmatter":{"title":"React v16.2.0: Improved Support for Fragments"},"fields":{"slug":"/blog/2017/11/28/react-v16.2.0-fragment-support.html"}}},{"node":{"frontmatter":{"title":"React v16.0"},"fields":{"slug":"/blog/2017/09/26/react-v16.0.html"}}},{"node":{"frontmatter":{"title":"React v15.6.2"},"fields":{"slug":"/blog/2017/09/25/react-v15.6.2.html"}}}]}},"pathContext":{"slug":"/blog/2016/04/07/react-v15.html"}}